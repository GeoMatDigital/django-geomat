# Generated by Django 2.1.7 on 2019-04-04 09:51

from django.db import migrations
from django.utils import translation


def generate_all_nodes(MineralType, TreeNode):
    translation.activate('de')

    MINERAL_CATEGORIES = MineralType._meta.get_field("systematics").choices
    SPLIT_CHOICES = MineralType._meta.get_field("split_systematics").choices
    SUB_CHOICES = MineralType._meta.get_field("sub_systematics").choices

    for short_sys, systematic in MINERAL_CATEGORIES:
        TreeNode.objects.create(node_name=translation.gettext(systematic), is_top_level=True)

    for short_split, split_systematic in SPLIT_CHOICES:
        TreeNode.objects.create(node_name=translation.gettext(split_systematic))

    for short_sub, sub_systematic in SUB_CHOICES:
        TreeNode.objects.create(node_name=translation.gettext(sub_systematic))


def link_all_nodes(MineralType, TreeNode):
    translation.activate('de')

    MINERAL_CATEGORIES = MineralType._meta.get_field("systematics").choices
    SPLIT_CHOICES = MineralType._meta.get_field("split_systematics").choices
    SUB_CHOICES = MineralType._meta.get_field("sub_systematics").choices

    for short_sys, systematic in MINERAL_CATEGORIES:
        top_node = TreeNode.objects.get(node_name=translation.gettext(systematic))

        for short_split, split_systematic in SPLIT_CHOICES:
            next_node_01 = TreeNode.objects.get(node_name=translation.gettext(split_systematic))
            if translation.gettext(split_systematic) in translation.gettext(systematic):
                top_node.leaf_nodes.add(next_node_01)
                top_node.save()

                for short_sub, sub_systematic in SUB_CHOICES:
                    next_node_02 = TreeNode.objects.get(node_name=translation.gettext(sub_systematic))
                    if translation.gettext(split_systematic).lower() in translation.gettext(sub_systematic):
                        next_node_02.leaf_nodes.add(next_node_01)
                        next_node_02.save()


def populate_TreeNode_table(apps, schema_editor):
    TreeNode = apps.get_model("stein", "TreeNode")
    MineralType = apps.get_model("stein", "MineralType")

    generate_all_nodes(MineralType, TreeNode)
    link_all_nodes(MineralType, TreeNode)


def revert(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('stein', '0061_create_treeNode_model'),
    ]

    operations = [
        migrations.RunPython(populate_TreeNode_table, revert)
    ]
